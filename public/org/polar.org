#+begin_src clojure :exports none
(ns fdg.ch1
  (:refer-clojure :exclude [+ - * / = compare zero? ref partial
                            numerator denominator])
  (:require [sicmutils.env :as e :refer :all :exclude [F->C]]))

(define-coordinates t e/R1-rect)
#+end_src

Easy polar coordinates

#+begin_src clojure
(->tex-equation
  (up (* 'R (cos 'phi))
      (* 'R (sin 'phi))))
#+end_src

#+begin_src clojure
(->tex-equation
  (up (* 'R (sin 'theta) (cos 'phi))
          (* 'R (sin 'theta) (sin 'phi))
          (* 'R (cos 'theta))))
#+end_src

#+begin_src clojure
(->infix
  (simplify
    ((D (* 3 (expt sin 2))) 'x)))
#+end_src

#+begin_src clojure
(define ((L-free-particle mass) local)
(let ((v (velocity local)) (_ 0))
(* 1/2 mass (dot-product v v)))) 
#+end_src

#+begin_src clojure
(define q
 (up (literal-function 'x)
 (literal-function 'y)
 (literal-function 'z))) 
#+end_src

#+begin_src clojure
((Gamma q) 't) 
#+end_src

#+begin_src clojure
((compose (L-free-particle 'm) (Gamma q)) 't) 
#+end_src

#+begin_src clojure
(define (Lagrangian-action L q t1 t2)
  (definite-integral (compose L (Gamma q)) t1 t2)) 
#+end_src

#+begin_src clojure
(define (test-path t)
  (up (+ (* 4 t) 7)
      (+ (* 3 t) 5)
      (+ (* 2 t) 1))) 
#+end_src

#+begin_src clojure
(Lagrangian-action (L-free-particle 3.0)
                   test-path 0.0 10.0) 
#+end_src

#+begin_src clojure
(define ((make-eta nu t1 t2) t)
(* (- t t1) (- t t2) (nu t))) 
#+end_src

#+begin_src clojure
(define ((varied-free-particle-action mass q nu t1 t2) eps)
  (let ((eta (make-eta nu t1 t2)) (_ _))
    (Lagrangian-action (L-free-particle mass)
                       (+ q (* eps eta))
                       t1
                       t2))) 
#+end_src

#+begin_src clojure
((varied-free-particle-action 3.0 test-path
                              (up sin cos square)
                              0.0 10.0)
 0.001) 
#+end_src

#+begin_src clojure
(minimize 
  (varied-free-particle-action 3.0 test-path
   (up sin cos square)
    0.0 10.0)
  -2.0 1.0)
#+end_src

#+begin_src clojure
(define ((parametric-path-action Lagrangian t0 q0 t1 q1) qs)
  (let ((path (make-path t0 q0 t1 q1 qs)) (_ 0))
    (Lagrangian-action Lagrangian path t0 t1))) 
#+end_src

#+begin_src clojure
  (define (find-path Lagrangian t0 q0 t1 q1 n)
    (let ((initial-qs (linear-interpolants q0 q1 n)) (_ 0))
      (let ((minimizing-qs
              (multidimensional-minimize
                (parametric-path-action Lagrangian t0 q0 t1 q1)
                initial-qs))
            (_ _))
        (make-path t0 q0 t1 q1 minimizing-qs)))) 
#+end_src

#+begin_src clojure
(define ((L-harmonic m k) local)
  (let ((q (coordinate local))
        (v (velocity local)))
    (- (* 1/2 m (square v)) (* 1/2 k (square q))))) 
#+end_src

#+begin_src clojure
(define q-harmonic 
  (find-path (L-harmonic 1.0 1.0) 0.0 1.0 :pi/2 0.0 3))
#+end_src

#+begin_src clojure
(- (cos 0.8) (q-harmonic 0.8))
#+end_src 

#+begin_src clojure
(define (general-test-path t)
  (up (+ (* 'a t) 'a0)
      (+ (* 'b t) 'b0)
      (+ (* 'c t) 'c0))) 
#+end_src

#+begin_src clojure
(((Lagrange-equations (L-free-particle 'm))
  general-test-path)
 't) 
#+end_src

#+begin_src clojure
(show-expression
  (((Lagrange-equations (L-free-particle 'm))
    (literal-function 'x))
   't)) 
#+end_src

#+begin_src clojure
(define (proposed-solution t)
  (* 'A (cos (+ (* 'omega t) 'phi)))) 
#+end_src

#+begin_src clojure
(show-expression
  (((Lagrange-equations (L-harmonic 'm 'k))
    proposed-solution)
   't)) 
#+end_src

#+begin_src clojure
    (define ((L-Kepler-central-polar m V) local)
      (let ((q (coordinate local))
            (qdot (velocity local)))
        (let ((r (ref q 0))
              (phi (ref q 1))
              (rdot (ref qdot 0)) (phidot (ref qdot 1)))
          (- (* 1/2 m
                (+ (square rdot) (square (* r phidot))) )
             (V r))))) 
#+end_src

#+begin_src clojure
(define ((gravitational-energy G m1 m2) r)
  (- (/ (* G m1 m2) r))) 
#+end_src

#+begin_src clojure
(define (circle t)
  (up 'a (* 'n t))) 
#+end_src

#+begin_src clojure
(define lagrangian-reduced
(L-Kepler-central-polar (/ (* 'M_1 'm_2) (+ 'M_1 'm_2))
(gravitational-energy 'G 'M_1 'm_2))) 
#+end_src

#+begin_src clojure
(((Lagrange-equations lagrangian-reduced) circle) 't) 
#+end_src

#+begin_src clojure
(define ((L-uniform-acceleration m g) local)
  (let ((q (coordinate local))
        (v (velocity local)))
    (let ((y (ref q 1)) (_ 0))
      (- (* 1/2 m (square v)) (* m g y))))) 
#+end_src

#+begin_src clojure
(show-expression
  (((Lagrange-equations
      (L-uniform-acceleration 'm 'g))
    (up (literal-function 'x)
        (literal-function 'y)))
   't)) 
#+end_src

#+begin_src clojure
(define ((L-central-rectangular m U) local)
  (let ((q (coordinate local))
        (v (velocity local)))
    (- (* 1/2 m (square v))
       (U (sqrt (square q)))))) 
#+end_src

#+begin_src clojure
  (((Lagrange-equations
      (L-central-rectangular 'm (literal-function 'U)))
    (up (literal-function 'x)
        (literal-function 'y)))
   't) 
#+end_src

#+begin_src clojure
(show-expression
  (((Lagrange-equations
      (L-Kepler-central-polar 'm (literal-function 'U)))
    (up (literal-function 'r)
        (literal-function 'phi)))
   't)) 
#+end_src

#+begin_src clojure
(define ((F->C F) local)
  (up (time local)
      (F local)
      (+ (((partial 0) F) local)
         (* (((partial 1) F) local)
            (velocity local))))) 
#+end_src

#+begin_src clojure
(define (p->r local)
  (let ((polar-tuple (coordinate local)))
    (let ((r (ref polar-tuple 0))
          (phi (ref polar-tuple 1)))
      (let ((x (* r (cos phi)))
            (y (* r (sin phi))))
        (up x y))))) 
#+end_src

#+begin_src clojure
(show-expression
  (velocity
    ((F->C p->r)
     (up 't (up 'r 'phi) (up 'rdot 'phidot))))) 
#+end_src

#+begin_src clojure
(define (L-central-polar m U)
  (compose (L-central-rectangular m U) (F->C p->r))) 
#+end_src

#+begin_src clojure
(show-expression
  ((L-central-polar 'm (literal-function 'U))
   (up 't (up 'r 'phi) (up 'rdot 'phidot)))) 
#+end_src

    <h4>Coriolis and centrifugal forces</h4>

#+begin_src clojure
(define ((L-free-rectangular m) local)
  (let ((vx (ref (velocities local) 0))
        (vy (ref (velocities local) 1)))
    (* 1/2 m (+ (square vx) (square vy))))) 
#+end_src

#+begin_src clojure
(define (L-free-polar m)
  (compose (L-free-rectangular m) (F->C p->r))) 
#+end_src

#+begin_src clojure
(define ((F Omega) local)
  (let ((t (time local))
        (r (ref (coordinates local) 0))
        (theta (ref (coordinates local) 1)))
    (up r (+ theta (* Omega t))))) 
#+end_src

#+begin_src clojure
(define (L-rotating-polar m Omega)
  (compose (L-free-polar m) (F->C (F Omega)))) 
#+end_src

#+begin_src clojure
(define (L-rotating-rectangular m Omega)
  (compose (L-rotating-polar m Omega) (F->C r->p))) 
#+end_src

#+begin_src clojure
(define (r->p local)
  (let ((rect-tuple (coordinate local)))
    (let ((x (ref rect-tuple 0))
          (y (ref rect-tuple 1)))
       (let ((r (sqrt (square rect-tuple)))
             (phi (atan (/ y x))))
         (up r phi))))) 
#+end_src

#+begin_src clojure
((L-rotating-rectangular 'm 'Omega)
(up 't (up 'x_r 'y_r) (up 'xdot_r 'ydot_r))) 
#+end_src

#+begin_src clojure
(+ (* 1/2 (expt 'Omega 2) 'm (expt 'x_r 2))
(* 1/2 (expt 'Omega 2) 'm (expt 'y_r 2))
(* -1 'Omega 'm 'xdot_r 'y_r)
(* 'Omega 'm 'ydot_r 'x_r)
(* 1/2 'm (expt 'xdot_r 2))
(* 1/2 'm (expt 'ydot_r 2))) 
#+end_src

#+begin_src clojure
(((Lagrange-equations (L-rotating-rectangular 'm 'Omega))
  (up (literal-function 'x_r) (literal-function 'y_r)))
 't)
#+end_src

#+begin_src clojure
(define x_r (literal-function 'x_r)) 
#+end_src

#+begin_src clojure
(define y_r (literal-function 'y_r)) 
#+end_src

#+begin_src clojure
(down
(+ (* -1 (expt 'Omega 2) 'm (x_r 't))
(* -2 'Omega 'm ((D y_r) 't))
(* 'm (((expt D 2) x_r) 't)))
(+ (* -1 (expt 'Omega 2) 'm (y_r 't))
(* 2 'Omega 'm ((D x_r) 't))
(* 'm (((expt D 2) y_r) 't)))) 
#+end_src

#+begin_src clojure
(define ((T-pend m l g ys) local)
(let ((t (time local) (_ 0))
(theta (coordinate local))
(thetadot (velocity local)))
(let ((vys (D ys)) (_ 0))
(* 1/2 m
(+ (square (* l thetadot))
(square (vys t))
(* 2 l (vys t) thetadot (sin theta))))))) 
#+end_src

#+begin_src clojure
(define ((V-pend m l g ys) local)
(let ((t (time local))
      (theta (coordinate local)))
  (* m g (- (ys t) (* l (cos theta)))))) 
#+end_src

#+begin_src clojure
(define L-pendulum (- T-pend V-pend)) 
#+end_src

#+begin_src clojure
(show-expression
(((Lagrange-equations
(L-pendulum 'm 'l 'g (literal-function 'y_s)))
(literal-function 'theta))
't)) 
#+end_src

#+begin_src clojure
(define ((L-uniform-acceleration m g) local)
  (let ((q (coordinate local))
        (v (velocity local)))
     (let ((y (ref q 1)) (_ 0))
       (- (* 1/2 m (square v)) (* m g y))))) ;;execution not necessary
#+end_src

#+begin_src clojure
(define ((dp-coordinates l y_s) local)
(let ((t (time local) (_ 0))
(theta (coordinate local)))
(let ((x (* l (sin theta)))
      (y (- (y_s t) (* l (cos theta)))))
(up x y)))) 
#+end_src

#+begin_src clojure
(define (L-pend m l g y_s)
(compose (L-uniform-acceleration m g)
(F->C (dp-coordinates l y_s)))) 
#+end_src

#+begin_src clojure
(show-expression
((L-pend 'm 'l 'g (literal-function 'y_s))
(up 't 'theta 'thetadot))) 
#+end_src

#+begin_src clojure
(define (Lagrangian->acceleration L)
(let ((P ((partial 2) L)) (F ((partial 1) L)))
(solve-linear-left
((partial 2) P)
(- F
(+ ((partial 0) P)
(* ((partial 1) P) velocity)))))) 
#+end_src

#+begin_src clojure
(define (Lagrangian->state-derivative L)
(let ((acceleration (Lagrangian->acceleration L)) (_ 0))
(lambda (state)
(up 1
(velocity state)
(acceleration state))))) 
#+end_src

#+begin_src clojure
(define (harmonic-state-derivative m k)
(Lagrangian->state-derivative (L-harmonic m k))) 
#+end_src

#+begin_src clojure
((harmonic-state-derivative 'm 'k)
(up 't (up 'x 'y) (up 'v_x 'v_y))) 
#+end_src

#+begin_src clojure
(up 1 (up 'v_x 'v_y) (up (/ (* -1 'k 'x) 'm) (/ (* -1 'k 'y) 'm))) 
#+end_src

#+begin_src clojure
(define ((Lagrange-equations-first-order L) q v)
  (let ((state-path (qv->state-path q v)) (_ 0))
    (- (D state-path)
       (compose (Lagrangian->state-derivative L)
                state-path)))) 
#+end_src

#+begin_src clojure
(define ((qv->state-path q v) t)
  (up t (q t) (v t))) 
#+end_src

#+begin_src clojure
(show-expression
 (((Lagrange-equations-first-order (L-harmonic 'm 'k))
   (up (literal-function 'x)
       (literal-function 'y))
   (up (literal-function 'v_x)
       (literal-function 'v_y)))
  't)) 
#+end_src

    <h4>Numerical integration</h4>

#+begin_src clojure
((state-advancer harmonic-state-derivative 2.0 1.0)
(up 1.0 (up 1.0 2.0) (up 3.0 4.0))
10.0
1.0e-12)
#+end_src

#+begin_src clojure
(up 11.0
    (up 3.7127916645844437 5.420620823651583)
    (up 1.6148030925459782 1.8189103724750855)) 
#+end_src

#+begin_src clojure
(define ((periodic-drive amplitude frequency phase) t)
(* amplitude (cos (+ (* frequency t) phase)))) 
#+end_src

#+begin_src clojure
(define (L-periodically-driven-pendulum m l g A omega)
(let ((ys (periodic-drive A omega 0)) (_ 0))
(L-pend m l g ys))) 
#+end_src

#+begin_src clojure
(show-expression
(((Lagrange-equations
(L-periodically-driven-pendulum 'm 'l 'g 'A 'omega))
(literal-function 'theta))
't)) 
#+end_src

#+begin_src clojure
(define (pend-state-derivative m l g A omega)
(Lagrangian->state-derivative
(L-periodically-driven-pendulum m l g A omega))) 
#+end_src

#+begin_src clojure
(show-expression
((pend-state-derivative 'm 'l 'g 'A 'omega)
(up 't 'theta 'thetadot))) 
#+end_src

#+begin_src clojure
(define (Lagrangian->energy L)
(let ((P ((partial 2) L)) (_ 0))
(- (* P velocity) L))) 
#+end_src

#+begin_src clojure
(define ((T3-spherical m) state)
(let ((q (coordinate state))
      (qdot (velocity state)))
(let ((r (ref q 0))
      (theta (ref q 1))
      (rdot (ref qdot 0))
      (thetadot (ref qdot 1))
      (phidot (ref qdot 2)))
(* 1/2 m
(+ (square rdot)
(square (* r thetadot))
(square (* r (sin theta) phidot))))))) 
#+end_src

#+begin_src clojure
  (define (L3-central m Vr)
    (let ((Vs (lambda (state)
                 (let ((r (ref (coordinate state) 0)))
                   (Vr r))))
          (_ 0))
       (- (T3-spherical m) Vs))) 
#+end_src

#+begin_src clojure
(show-expression
(((partial 1) (L3-central 'm (literal-function 'V)))
(up 't
(up 'r 'theta 'phi)
(up 'rdot 'thetadot 'phidot)))) 
#+end_src

#+begin_src clojure
(show-expression
(((partial 2) (L3-central 'm (literal-function 'V)))
(up 't
(up 'r 'theta 'phi)
(up 'rdot 'thetadot 'phidot)))) 
#+end_src

#+begin_src clojure
(define ((ang-mom-z m) rectangular-state)
(let ((xyz (coordinate rectangular-state))
      (v (velocity rectangular-state)))
(ref (cross-product xyz (* m v)) 2))) 
#+end_src

#+begin_src clojure
(define (s->r spherical-state)
(let ((q (coordinate spherical-state)) (_ 0))
(let ((r (ref q 0))
      (theta (ref q 1))
      (phi (ref q 2)))
(let ((x (* r (sin theta) (cos phi)))
      (y (* r (sin theta) (sin phi)))
      (z (* r (cos theta))))
(up x y z))))) 
#+end_src

#+begin_src clojure
(show-expression
((compose (ang-mom-z 'm) (F->C s->r))
(up 't
(up 'r 'theta 'phi)
(up 'rdot 'thetadot 'phidot)))) 
#+end_src

#+begin_src clojure
(show-expression
((Lagrangian->energy (L3-central 'm (literal-function 'V)))
(up 't
(up 'r 'theta 'phi)
(up 'rdot 'thetadot 'phidot)))) 
#+end_src

#+begin_src clojure
(define ((L0 m V) local)
(let ((t (time local))
      (q (coordinates local))
      (v (velocities local)))
(- (* 1/2 m (square v)) (V t q)))) 
#+end_src

#+begin_src clojure
(define ((V a GM0 GM1 m) t xy)
(let ((Omega (sqrt (/ (+ GM0 GM1) (expt a 3))))
      (a0 (* (/ GM1 (+ GM0 GM1)) a))
      (a1 (* (/ GM0 (+ GM0 GM1)) a)))
(let ((x (ref xy 0)) (y (ref xy 1))
      (x0 (* -1 a0 (cos (* Omega t))))
      (y0 (* -1 a0 (sin (* Omega t))))
      (x1 (* +1 a1 (cos (* Omega t))))
      (y1 (* +1 a1 (sin (* Omega t)))))
(let ((r0 (sqrt (+ (square (- x x0)) (square (- y y0)))))
      (r1 (sqrt (+ (square (- x x1)) (square (- y y1))))))
(- (+ (/ (* GM0 m) r0) (/ (* GM1 m) r1))))))) 
#+end_src

#+begin_src clojure
    (define ((LR3B m a GM0 GM1) local)
    (let ((q (coordinates local))
          (qdot (velocities local))
          (Omega (sqrt (/ (+ GM0 GM1) (expt a 3))))
          (a0 (* (/ GM1 (+ GM0 GM1)) a))
          (a1 (* (/ GM0 (+ GM0 GM1)) a)))
    (let ((x (ref q 0))
          (y (ref q 1))
          (xdot (ref qdot 0))
          (ydot (ref qdot 1)))
    (let ((r0 (sqrt (+ (square (+ x a0)) (square y))))
          (r1 (sqrt (+ (square (- x a1)) (square y)))))
    (+ (* 1/2 m (square qdot))
    (* 1/2 m (square Omega) (square q))
    (* m Omega (- (* x ydot) (* xdot y)))
    (/ (* GM0 m) r0) (/ (* GM1 m) r1)))))) 
#+end_src

#+begin_src clojure
  (define ((LR3B1 m a0 a1 Omega GM0 GM1) local)
  (let ((q (coordinates local))
        (qdot (velocities local)))
  (let ((x (ref q 0))
        (y (ref q 1))
        (xdot (ref qdot 0)) (ydot (ref qdot 1)))
  (let ((r0 (sqrt (+ (square (+ x a0)) (square y))))
        (r1 (sqrt (+ (square (- x a1)) (square y)))))
  (+ (* 1/2 m (square qdot))
  (* 1/2 m (square Omega) (square q))
  (* m Omega (- (* x ydot) (* xdot y)))
  (/ (* GM0 m) r0) (/ (* GM1 m) r1)))))) 
#+end_src

#+begin_src clojure
((Lagrangian->energy (LR3B1 'm 'a_0 'a_1 'Omega 'GM_0 'GM_1))
(up 't (up 'x_r 'y_r) (up 'v_r^x 'v_r^y)))
#+end_src

#+begin_src clojure
(+ (* 1/2 'm (expt 'v_r^x 2))
(* 1/2 'm (expt 'v_r^y 2))
(/ (* -1 'GM_0 'm)
(sqrt (+ (expt (+ 'x_r 'a_0) 2) (expt 'y_r 2))))
(/ (* -1 'GM_1 'm)
(sqrt (+ (expt (- 'x_r 'a_1) 2) (expt 'y_r 2))))
(* -1/2 'm (expt 'Omega 2) (expt 'x_r 2))
(* -1/2 'm (expt 'Omega 2) (expt 'y_r 2)))
#+end_src


#+begin_src clojure
(define (F-tilde angle-x angle-y angle-z)
(compose (Rx angle-x) (Ry angle-y) (Rz angle-z) coordinate)) 
#+end_src

#+begin_src clojure
  (define the-Noether-integral
    (let ((L (L-central-rectangular
                'm (literal-function 'U)))
          (_ 0))
       (* ((partial 2) L) ((D F-tilde) 0 0 0)))) 
#+end_src

#+begin_src clojure
(define let-L (L-central-rectangular
              'm (literal-function 'U))) 
#+end_src

#+begin_src clojure
(define the-Noether-integral
  (* ((partial 2) let-L) ((D F-tilde) 0 0 0))) 
#+end_src

#+begin_src clojure
(the-Noether-integral
(up 't
(up 'x 'y 'z)
(up 'vx 'vy 'vz))) 
#+end_src

#+begin_src clojure
(down (+ (* 'm 'vy 'z) (* -1 'm 'vz 'y))
(+ (* 'm 'vz 'x) (* -1 'm 'vx 'z))
(+ (* 'm 'vx 'y) (* -1 'm 'vy 'x))) 
#+end_src

#+begin_src clojure
(define ((Gamma-bar f-bar) local)
((f-bar (osculating-path local)) (time local))) 
#+end_src

#+begin_src clojure
  (define (F->C1 F)
    (let ((_ 0)
          (C (lambda (local)
      (let ((n (vector-length local))
            (f-bar (lambda (q-prime)
                     (let ((q (compose F (Gamma q-prime))  ))
                       (Gamma q n)))))
        ((Gamma-bar f-bar) local)))))
      C)) 
#+end_src

#+begin_src clojure
(show-expression
((F->C1 p->r)
(up 't (up 'r 'theta) (up 'rdot 'thetadot)))) 
#+end_src

#+begin_src clojure
(define (Dt F)
  (let ((_ 0) (DtF (lambda (state)
               (let ((n (vector-length state))
                     (DF-on-path (lambda (q)
                                 (D (compose F (Gamma q (- n 1)))))))
                 ((Gamma-bar DF-on-path) state)))))
    DtF)) 
#+end_src

#+begin_src clojure
(define (Euler-Lagrange-operator L)
(- (Dt ((partial 2) L)) ((partial 1) L))) 
#+end_src

#+begin_src clojure
((Euler-Lagrange-operator
   (L-harmonic 'm 'k))
     (up 't 'x 'v 'a)) 
#+end_src

#+begin_src clojure
(+ (* 'a 'm) (* 'k 'x)) 
#+end_src

#+begin_src clojure
((compose
(Euler-Lagrange-operator (L-harmonic 'm 'k))
(Gamma (literal-function 'x) 4))
't) 
#+end_src

#+begin_src clojure
(+ (* 'k ((literal-function 'x) 't))
   (* 'm (((expt D 2) (literal-function 'x)) 't))) 
#+end_src

